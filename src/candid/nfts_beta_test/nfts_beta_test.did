type NFTsBeta = 
 service {
   addBetaPlayer: (text, nat) -> (bool);
   addCharsCodes: (CodesList) -> (bool);
   addCodes: (CodesList) -> (bool);
   adminAddBetaPlayer: (text, nat, principal) -> (bool);
   approveUser: (BetaPlayerId) -> (bool);
   checkPlayerAdded: () -> (bool) query;
   deleteAllCodes: () -> (bool);
   deleteUser: (principal) -> (opt BetaPlayerData);
   deleteUserCodes: (principal) -> (opt BetaPlayerNFTs);
   getAllCodes: () -> (opt BetaPlayerNFTs) query;
   getAllCodesAv: () -> (vec record {
                               nat;
                               NFTType;
                             }) query;
   getAllCodesCh: () -> (vec record {
                               nat;
                               NFTType;
                             }) query;
   getAllCodesNum: () -> (nat) query;
   getAllUsers: () -> (vec record {
                             BetaPlayerId;
                             BetaPlayerData;
                           }) query;
   getAllUsersNum: () -> (nat) query;
   getBetaData: () -> (text);
   getBetaPlayer: () -> (opt BetaPlayerData) query;
   getUserData: (BetaPlayerId) ->
    (vec record {
           opt BetaPlayerData;
           opt BetaPlayerNFTs;
         }) query;
   whoAmI: () -> (principal) query;
 };
type NFTType__1 = 
 record {
   batch: nat;
   code: NFTCode;
   faction: text;
   shipName: text;
 };
type NFTType = 
 record {
   batch: nat;
   code: NFTCode;
   faction: text;
   shipName: text;
 };
type NFTCode = 
 record {
   code: text;
   id: nat;
 };
type CodesList = vec NFTType__1;
type BetaPlayerNFTs = 
 record {
   nftChar: NFTCode;
   nftsCodes: vec NFTCode;
 };
type BetaPlayerId = principal;
type BetaPlayerData = 
 record {
   allowed: nat;
   faction: nat;
   id: principal;
   wallet: text;
 };
service : (principal) -> NFTsBeta
